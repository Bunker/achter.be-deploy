<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on achter.be</title>
    <link>http://www.achter.be/categories/git/</link>
    <description>Recent content in Git on achter.be</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Feb 2016 22:00:57 +0100</lastBuildDate>
    <atom:link href="http://www.achter.be/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Auto deploy hugo site</title>
      <link>http://www.achter.be/blog/20160226_hugo_git_deploy_automation/</link>
      <pubDate>Fri, 26 Feb 2016 22:00:57 +0100</pubDate>
      
      <guid>http://www.achter.be/blog/20160226_hugo_git_deploy_automation/</guid>
      <description>

&lt;p&gt;As some of you know, I&amp;rsquo;m running this site through with the &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; site generator. Hugo has many advantages, but one big disadvantage is that to update my site it takes a lot of steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write the markdown code&lt;/li&gt;
&lt;li&gt;Generate the site through hugo&lt;/li&gt;
&lt;li&gt;Commit the site to github&lt;/li&gt;
&lt;li&gt;Connect to Gandi simple hosting through sftp and replace all files because all files are seen as new&lt;/li&gt;
&lt;li&gt;Check permissions after upload&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although only 5 steps this usually takes around 20 minutes to complete.&lt;/p&gt;

&lt;p&gt;Earlier this evening I stumbled upon a [blogpost on Gandi cookbook][2] about auto deploy sites through git on gandi simple hosting. I followed their tutorial and added an extra bash script so that now all it takes me is 1 command and a commit message.&lt;/p&gt;

&lt;p&gt;To make sure that the info doesn&amp;rsquo;t get lost and for those having using hugo, unix and gandi simple hosting all combined, these are the steps necessary:&lt;/p&gt;

&lt;h2 id=&#34;bash-script-for-automating-hugo-generation-and-git-commit-push:e19102061fb5c6b9a2b90417a4cbe015&#34;&gt;Bash script for automating hugo generation and git commit + push&lt;/h2&gt;

&lt;p&gt;First let&amp;rsquo;s make a bash script to automate the hugo build and the git commit and push.&lt;/p&gt;

&lt;p&gt;We are using the ability of hugo to have a deploy directory specified, this is because I have my source code also in a git repository and I want my dev code separate from my live code.&lt;/p&gt;

&lt;p&gt;create a file in your home dir on your local system. And paste the following code, change the file paths off course.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
cd FULL_PATH_TO_HUGO_DIRECTORY &amp;amp;&amp;amp; \
rm -rf &amp;amp;&amp;amp; \
hugo -d &amp;quot;PATH_TO_DEPLOY_DIRECTORY&amp;quot; &amp;amp;&amp;amp; \
cd PATH_TO_DEPLOY_DIRECTORY &amp;amp;&amp;amp; \
read -p &amp;quot;Commit description: &amp;quot; desc
git add . &amp;amp;&amp;amp; \
git add -u &amp;amp;&amp;amp; \
git commit -m &amp;quot;$desc&amp;quot; &amp;amp;&amp;amp; \
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now make a dir ~/bin if it doesn&amp;rsquo;t already exists and copy the script to that directory.&lt;/p&gt;

&lt;p&gt;After a reboot or after manually adding the ~/bin path to your ~/.profile you should be able to run the script from everywhere on your system as yourself, however not as root, sudo or another user.&lt;/p&gt;

&lt;h2 id=&#34;auto-deploy-github-to-simple-hosting:e19102061fb5c6b9a2b90417a4cbe015&#34;&gt;Auto deploy github to simple hosting&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a simple hosting instance, I had already one PHP/MYSQL version&lt;/li&gt;
&lt;li&gt;Go to the admin panel and activate ssh access in your simple hosting&lt;/li&gt;
&lt;li&gt;Connect to your ssh and navigate to the htdocs of the vhost you want to auto deploy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;cd /srv/data/web/vhosts/[replace with your vhost]/htdocs&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remove all existing files, make sure you have a backup if the instance is not new&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;rm -rf *&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone your github repository use the dot at the end of the line, to make sure the repository gets cloned without making a subdirectory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/[username]/[repositoryname].git .&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check that the files are there&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;ls -la&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a php file with the following content, I named it pull.php&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;nano pull.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;paste the following code in there&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;?php
`git pull`;                         // This will execute the `git pull` command on your instance
header(&amp;quot;Cache-Control: max-age=1&amp;quot;); // Lower the cache while we&#39;re here so the changes take effect faster
echo &amp;quot;hello!&amp;quot;;                      // So you can confirm the file is in the right place by browsing to the URL
?&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make the php file executable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;chmod +x pull.php&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if the file works by browsing to its URL, [domain]/pull.php&lt;/li&gt;
&lt;li&gt;Go to the settings of your github repository and select webhooks and services&lt;/li&gt;
&lt;li&gt;Create a new webhook, where you paste the url of the pull.php, leave all other settings at default&lt;/li&gt;
&lt;li&gt;Do an update to check if it works&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;DISCLAIMER&lt;/em&gt;: For me it all works very well, but don&amp;rsquo;t change any of the files on the simple hosting without using git or you will have to restart the procedure.&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://gnadi-cookbook.readthedocs.org/en/latest/paas/auto-git-deployment.html&#34;&gt;http://gnadi-cookbook.readthedocs.org/en/latest/paas/auto-git-deployment.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terminal: Git commands cheat sheet</title>
      <link>http://www.achter.be/blog/20150611_git_commands/</link>
      <pubDate>Thu, 11 Jun 2015 17:40:37 +0200</pubDate>
      
      <guid>http://www.achter.be/blog/20150611_git_commands/</guid>
      <description>&lt;p&gt;To start a repository from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial import&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When files are added to .gitignore and are not removed, use following commands and commit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm -r --cached .
git add .
git commit -m &amp;quot;fixed untracked files&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>